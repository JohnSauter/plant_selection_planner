Plant Selection Planner, July 2, 2022


Description
A plant database searcher in which a user can retrieve a list of plants that fall under desired criteria – hardiness zone, sun exposure, herbaceous/shrub/tree, evergreen/deciduous (for woody shrubs/trees), and bloom time. The user can then add plants to a personal collection that they can print and take on a trip to a nursery.


Personnel
 Haley Gustafson, John Sauter, Ash Carruth


Motivation for Development
Amateur gardeners often go to plant nurseries and ask for plants that meet certain criteria. It can be difficult to narrow down the immense number of choices at a nursery while meeting all desired criteria. If a gardener were able to search a list of plants by desired criteria and develop a list of plants that meet their needs, they could take their list to a nursery and ask if their desired plants are available, rather than asking the nursery to narrow their choices down for them, expediting the process for everyone.
User Stories


As a gardener,
I want to search for plants filtered by certain criteria
So that I can choose plants that suit my gardening needs


As a user,
I want to add plants to a personal collection
So that I can print that list to take with me to a nursery


As a Nursery Manager,
I want to provide my customers with the plants that meet their needs without wasting a lot of time.


Technologies
Foundation, Node.js, Express.js, Handlebars.js, MySQL, Sequelize, nodemailer


Task Breakdown
1. Design user flows: what pages will each type of user see, and what actions can be taken on each
2. Design data structures to support the user actions
3. Populate the plant database
4. Design and code the server: this includes specifying the paths
5. Construct and lay out the user pages based on the user flow design, using the paths to the server
6. Test and debug
7. Deploy to Heroku
8. Present the application to the class
9. Submit the application as project 2.
Preliminary User Flow Design


This is a wordy and necessarily vague description of how the application will look from the users’ points of view.  It is a complement to the wireframe.


There will be two types of users: gardeners and nursery managers.  Each will have its own flow, though a nursery manager can create an account for a customer who is unfamiliar with the software.


The nursery manager will populate the plant database with all the plants in his inventory.  He can update the description of each plant, both the written description and (in a future version) the picture.  Importantly, he must specify the characteristics of the plant, such as what degree of sunlight it needs.


The gardener will be able to choose plants from the database for her garden.  When choosing plants she can specify filters to narrow her selection.  For example, she might only wish to see plants that are suitable for her climate.  Filters can be combined: she might wish, for example, to see only plants that are deer-resistant and in stock.


When the gardener has chosen the plants she wishes to purchase she can send the list to the nursery as an email message, or use the application from the nursery to show the nursery manager what she wants.  To facilitate this, the nursery manager will be able to see the gardener’s selections.  This can also be used during a remote interaction: the nursery manager can give suggestions and watch the changes in the gardener’s choices.


User Interface Design Details


In this space we will flesh out some details of the user interface.


When a user first connects to the application, he must login or sign up for an account.  Signing up requires a username, email address, and password.  The username must not already be in use.


The main page for the gardener is the list of chosen plants. She can delete and add plants.  When adding a plant she performs a search of the plant database, specifying conditions she requires such as hardiness, and then being able to choose from the filtered list.


An important part of the user interface is specifying the viewing filters.  There needs to be a convenient and intuitive way to say which kinds of plants are of interest.  The web site https://www.gardenia.net/ is a good resource for criteria.  Another good resource is the American Horticultural Society at https://ahsgardening.org/.  Here is my list, though we will probably implement only a subset, leaving the rest for future work.


1. Garden type:
   1. City and courtyard
   2. Coastal garden
   3. Cutting garden
   4. Formal garden
   5. Gravel and rock garden
   6. Informal and cottage
   7. Mediterranean garden
   8. Japanese garden
   9. Modern garden
   10. Traditional garden
   11. Prairie and meadow
   12. Victory garden (from World War II)
2. Region:
   1. Australia
   2. Europe
   3. North America
      1. Canada
      2. United States
         1. Northeast
         2. Midwest
         3. South
         4. Western states
3. Native to:
   1. Australia
   2. United Kingdom
   3. United States
      1. Alaska
      2. California
      3. Midwest
      4. Northeast
      5. Pacific Northwest
      6. Rocky Mountains
      7. Southeast
      8. Southwest
4. Drought tolerant
5. Deer resistant
6. Salt resistant
7. In stock
8. Maintenance
   1. Low
   2. Average
   3. high
9. Sunlight requirements: 
   1. shade, 
   2. partial sun, 
   3. full sun
10. Water requirements:
   1. Low
   2. Average
   3. High
11. How much winter cold can the plant stand in degrees Fahrenheit?  Serious gardeners are usually aware of their zone, but first-time gardeners may not be.  Gardeners can search here if they are not sure of their hardiness zone: https://planthardiness.ars.usda.gov/ 
   1. -60 (zone 1a)
   2. -55 (zone 1b)
   3. -50 (zone 2a)
   4. -45 (zone 2b)
   5. -40 (zone 3a)
   6. -35 (zone 3b)
   7. -30 (zone 4a)
   8. -25 (zone 4b)
   9. -20 (zone 5a)
   10. -15 (zone 5b)
   11. -10 (zone 6a)
   12. -5 (zone 6b)
   13. 0 (zone 7a)
   14. 5 (zone 7b) 
   15. 10 (zone 8a)
   16. 15 (zone 8b)
   17. 20 (zone 9a)
   18. 25 (zone 9b)
   19. 30 (zone 10a)
   20. 35 (zone 10b) 
   21. 40 (zone 11a)
   22. 45 (zone 11b)
   23. 50 (zone 12a)
   24. 55 (zone 12b) 
   25. 60 (zone 13a)
   26. 65 (zone 13b)
12. How much summer heat can the plant stand?  How many days in each year is the temperature over 86 degrees Fahrenheit?  You can check a 1997 map if you are unsure:https://ahsgardening.org/about-us/news-press/cool_timeline/heat-zone-map-developed/ The PDF is at https://solanomg.ucanr.edu/files/245158.pdf 
   1. 0 (zone 1)
   2. 1 to 7 (zone 2)
   3. 7 to 14 (zone 3)
   4. 14 to 30 (zone 4)
   5. 30 to 45 (zone 5)
   6. 45 to 60 (zone 6)
   7. 60 to 90 (zone 7)
   8. 90 to 120 (zone 8)
   9. 120 to 150 (zone 9)
   10. 150 to 180 (zone 10)
   11. 180 to 210 (zone 11)
   12. 210 or more (zone 12)
13. Plant type:
   1. Annuals
   2. bulbs 
   3. cactus (succulents) 
   4. climbers 
   5. conifers 
   6. ferns 
   7. fruit 
   8. herbs 
   9. ornamental grasses 
   10. perennials 
   11. roses 
   12. shrubs 
   13. trees 
   14. palms (cycads) 
   15. bamboos 
   16. aquatic plants 
   17. orchids
14. Season of interest: 
   1. early spring 
   2. mid spring 
   3. late spring 
   4. early summer
   5. mid summer 
   6. late summer 
   7. fall 
   8. winter
15. Planting place:
   1. Arbors, pergolas, trellises
   2. Banks and slopes
   3. Beds and borders
   4. Bog gardens
   5. Edging
   6. Ground covers
   7. Hanging baskets
   8. Hedges and screens
   9. Patio and containers
   10. Ponds and streams
   11. Rain gardens
   12. Small gardens
   13. Underplanting roses and shrubs
   14. Wall-side borders
   15. Walls and fences
   16. Water gardens


When the gardener is selecting filters she needs to be able to specify multiple choices in each category, for example water requirements might be both low and average.  Initially all values will be allowed for all filters, and the gardener can choose to limit the list of plants by removing choices.


When the nursery manager enters a plant into the database, he will specify all the choices that pertain to the plant.  For example, a plant might be able to stand winters down to -20 degrees Fahrenheit, in which case hardiness zones 5a to 13b would be specified, and heat up to 30 hot days per year, in which case heat zones 1 to 5 would be specified.  By default, no choices are selected, so the nursery manager must specify everything about the plant.  This is likely to be tedious, so perhaps there should be a way to copy the criteria from an existing plant when entering a new one.


Pages


For the next stage of the design, we describe each page and how it will operate.  The pages have names for our convenience, but these names are not visible to the user.


All pages have a header and footer provided by Handlebar.  It contains the material that must be placed at the beginning and end of every page.  The navigation header is tailored by Handlebar to display a logout button only if the user is logged in, and a login button otherwise.  Other buttons can also be made visible if they are needed.  We might have a home button, for example, which will take the user to his appropriate home page, depending on whether he is a gardener or a nursery manager.  Each Handlebar layout  provides HTML starting with <main> and ending with </main>.


1. Front: The front page contains a brief description of the application and buttons to choose whether to log in, sign up as a gardener or sign up as a nursery manager.
2. Login: If the user chooses to log in, he gets a page which lets him enter his username and password.
3. Sign_up:
   1. as_gardener: If the user chooses to sign up as a gardener, she gets a page which lets her enter her desired username, her desired password, and her email address. 
   2. as_nursery_manager: If the user chooses to sign up as a nursery manager he gets a page which lets him enter his desired username, password and email address.  In the future we will also let the nursery manager choose which nursery he is managing, and have a way to create new nurseries.
4. Gardener_home: Once a gardener is logged in she will see a screen listing all of the plants she has chosen for the current zone of her garden. Initially a gardener will have one zone, with a blank name 
   1. In the future there will be a way to create new zones, choose a zone to be the current zone, change the name of the current zone and delete the current zone.  If there is only one zone it cannot be deleted.  When a zone is deleted a remaining zone is chosen as the current zone.
   2. For each plant in the zone there will be a way to delete the plant from the zone.
   3. There will be a search button, which will take her to the search page.  The plants she chooses from the search page will be added to the current zone.  
   4. There will be a button to send the current selections to the nursery manager as an e-mail message, with a copy to the gardener so she can print it if she wishes.
5. Gardener_search: The search page will start by showing all the plants..  Each plant is shown with its formal name, its common name, and a brief description.  In the future we may add a picture of the plant.  There will be a checkbox on each plant to select it, and when the gardener is done with this page she will return to her home page with those plants added to it.  
   1. There is a button on each plant to bring up more information about the plant.
   2. There is a way to show only the plants that meet the gardener’s needs, by filtering out those that don’t.
6. Plant: information about the plant, including a picture in the future.
7. Nursery_mangager_home: Once a nursery manager is logged in he sees the list of all plants in the database.
   1. If he chooses a plant to edit he goes to the nursery_manager_edit_plant page. 
   2. There is a button to add a new plant.
   3. There is a button to let the nursery manager see the selections of a customer by providing the customer’s name.
   4. We might want a Seed button on the nursery_manager_home page for testing in Heroku.
   5. In the future we will have a way for the nursery manager to separate his nursery into areas, with plants in each area, similar to the gardener’s garden zones.
8. Nursery_manager_customer: When the nursery manager asks to see the selections of a customer he is shown all plants selected by that customer without regard to zones.  If he is in contact with the customer he can make suggestions and watch the list change as she updates her selections.
9. Nursery_manger_add_plant: When the nursery manager adds a plant he is taken to a page with pull-downs for each category, initially all not checked.  There is also a place for the name of the plant (formal and common), and the description,.  In the future we will add a way to upload a picture.  It is an error to add a plant that already exists, in which case the user should be directed to the nursery_manager_edit_plant page.
10. Nursery_manager_edit_plant: The nursery manager can change anything about a plant, such as its tolerance for cold weather and whether or not it is in stock.


Paths


The front end communicates with the server through paths and HTTP methods.  Given the front end design above, we can specify the paths that the server must provide.  The path names start with the name of the page they are used from, except the empty path is part of the front paths..  Paths that include “api” are for passing information in JSON format between the front end and the server.  The other paths are for sending HTML from the server to the front end.


1. Front:
   1. Get / (the empty path) loads the front page.
2. User
   1. Get /user/home loads either
      1. The front page if the user is not logged in, or
      2. The gardener_home page if the user is logged in as a gardener, or
      3. The nursery_manager_home page if the user is logged in as a nursery manager. 
   2. Get /user/login loads the login page.
   3. Get /user/sign_up_as gardener loads the signup page, with the user_type passed as Gardener.
   4. Get /user/sign_up_as_nursery_manager loads the signup page, with the user_type passed as Nursery.
   5. Current API routes:
      1. Post /user/api/signup/:userType validates the sign up, returning a success or failure indication.
      2. Post /user/api/login validates the login, returning a success or failure indication. 
      3. Post /user/api/logout Log out the logged-in user.
   6. Future API routes:
      1. Get user/api/zone returns the user’s current garden zone
      2. Get user/api/zones returns all of this user’s garden zones
      3. Put user/api/zone/:zone_id changes the user’s current zone
      4. Post user/api/zone/:zone_name creates a new garden_zone.  It is an error to create two zones with the same name.
      5. Put user/api/zone/:zone_id/:zone_name changes the name of garden_zone zone_id to zone_name.
      6. Delete user/api/zone/:zone_id deletes a garden_zone.  If there is only one zone it cannot be deleted.  When a zone is deleted some other zone is chosen to be the current zone; it is returned.
3. Gardener:
   1. Get gardener/home loads the gardener_home page. 
   2. Get gardener/search loads the gardener_search page.
   3. Get gardener/plant/:plant_type_id loads the page for a particular plant_type.  
   4. API routes:
      1. Post gardener/api/plant_type/:plant_type_id adds the plant_type to the current zone.  
      2. Delete gardener/api/plant_type/:plant_type_id removes the plant_type from the current zone..
      3. Post gardener/api/email sends an e-mail message to the nursery manager with the gardener’s selections.  A copy is sent to the gardener.
4. Nursery Manager:
   1. Get nursery_manager/home loads the nursery_manager_home page.  
   2. Get nursery_manager/customer/:customer_id loads the nursery_manager_customer page.  It has the same information as the e-mail message that the gardener can send.
   3. Get nursery_manager/add_plant loads the nursery_manager_add_plant page.
   4. Get nursery_manager/edit_plant/:plant_type_id loads the nursery_manager_edit_plant page. 
   5. API routes:
      1. Put nursery_manager/api/plant_type/:plant_type_id modifies the information about a plant_type in the database.
      2. Post nursery_manager/api/plant_type adds a plant_type to the database.  The plant_type is returned.
      3. Post nursery_manager/api/seed empties all the tables and loads them with the initial data.


Data Structures


1. The user model has an id, name, email address, hashed password, and user_type.
   1. The user_type will be either “Gardener” or “Nursery”.  
   2. A user has many garden_zones.
2. The garden_zone model has an id, name, and user_id.
   1. A garden zone belongs to a user.
   2. A garden_zone has many plant_instances.
3. The plant_type model has an id, plant_name, description, and criteria.  In the future we may add a picture.
   1. A plant_type has many plant_instances.
4. The plant_instance model has an id, plant_type_id, and garden_zone_id.  It serves as the intermediate model in the many-to-many relationship between garden_zone and plant_type.


Future Development


Expansion of the plant database and selection criteria.  Support of multiple nurseries.  Addition of plant pictures.  Addition of plant location and number available in a nursery.  Addition of garden zones and the number of each kind of plant needed in each zone.


Note: this document is maintained in Google Docs, URL https://docs.google.com/document/d/1GCexcE_5XEOtCtG3s_m5X1G4Os9K-uVu_rLfUuYzvA4/edit.
Wireframe